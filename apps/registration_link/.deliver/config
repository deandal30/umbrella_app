APP="registration_link"
DB="db"
SOLUTION="innerpeace"

BUILD_HOST="172.16.45.11"
BUILD_USER="medi"
BUILD_AT="/tmp/edeliver/$SOLUTION/builds"
RELEASE_DIR="$BUILD_AT/_build/$TARGET_MIX_ENV/rel/$APP"
TEST_AT="/home/medi/registrationlink"

STAGING_HOSTS="172.16.45.7 172.16.45.13"
STAGING_USER="medi"

PRODUCTION_HOSTS="172.16.20.100"
PRODUCTION_USER="medi"
DELIVER_TO="/home/medi/prod"

BUILD_CMD=mix
RELEASE_CMD=mix
USING_DISTILLERY=true

# Set different envs
if [[ "$DEPLOY_ENVIRONMENT" = "staging" ]]; then
  STAGING_HOSTS="172.16.45.7 172.16.45.13"
elif [[ "$DEPLOY_ENVIRONMENT" = "migration" ]]; then
  STAGING_HOSTS="172.16.45.5"
elif [[ "$DEPLOY_ENVIRONMENT" = "autotest" ]]; then
  STAGING_HOSTS="172.16.45.16"
elif [[ "$DEPLOY_ENVIRONMENT" = "uat" ]]; then
  STAGING_HOSTS="172.16.23.61"
fi

pre_erlang_clean_compile() {
  status "Preparing assets with: brunch build and phoenix.digest"
  __sync_remote "
    # runs the commands on the build host
    [ -f ~/.profile ] && source ~/.profile # load profile (optional)

    # fail if any command fails (recommended)
    set -e

    # enter the build directory on the build host (required)
    cd '$BUILD_AT/apps/registration_link/assets'


    # installing npm dependencies
    npm install

    # building brunch
    node_modules/brunch/bin/brunch build -p

    cd ..
    MIX_ENV=$TARGET_MIX_ENV mix phx.digest
  "
}
